import { Composer, Markup, Scenes } from 'telegraf'
import { validateTime } from '../helpers/validateTime.js'
import { validateCityWeather } from '../helpers/validateCityWeather.js'
import { getTimeToNotification } from '../helpers/getTimeToNotification.js'
import { weatherRequest } from '../requests/weatherRequest.js'

export const weatherSubscribeWizard = new Composer()
weatherSubscribeWizard.on('text', async ctx => {
    ctx.wizard.state.data = {}
    await ctx.reply('–í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–∞—Å–µ–ª—ë–Ω–Ω–æ–≥–æ –ø—É–Ω–∫—Ç–∞')
    return ctx.wizard.next()
})

export const cityWeatherSubscribe = new Composer()
cityWeatherSubscribe.on('text', async ctx => {
    const response = await validateCityWeather(ctx.message.text)
    if (response !== 'ok') {
        await ctx.reply(response)
        await ctx.reply('–ú–æ–∂–µ—à—å –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –¥—Ä—É–≥–∏–º–∏ –∫–æ–º–∞–Ω–¥–∞–º–∏ :)')
        return ctx.scene.leave()
    }
    ctx.wizard.state.data.city = ctx.message.text
    await ctx.reply(
        '–í–≤–µ–¥–∏ –≤—Ä–µ–º—è –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:mm (–Ω–∞–ø—Ä–∏–º–µ—Ä 15:48)'
    )
    return ctx.wizard.next()
})

export const timeWeatherSubscribe = new Composer()
timeWeatherSubscribe.on('text', async ctx => {
    let time = validateTime(ctx.message.text)
    let interval = {}

    if (time) {
        await ctx.reply(
            `–ì–æ—Ç–æ–≤–æ! –¢–µ–ø–µ—Ä—å –µ–∂–µ–¥–Ω–µ–≤–Ω–æ –≤ ${ctx.message.text} —Ç—ã –±—É–¥–µ—à—å –ø–æ–ª—É—á–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ –≤
üìç${ctx.wizard.state.data.city} 

–ï—Å–ª–∏ –∑–∞—Ö–æ—á–µ—à—å –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è - –ø–æ–¥ –∫–∞–∂–¥—ã–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ–º –µ—Å—Ç—å –∫–Ω–æ–ø–∫–∞üòâ`
        )
    } else {
        time = { hours: '08', minutes: '00' }
        await ctx.reply(
            `–Ø –Ω–µ —Å–æ–≤—Å–µ–º –ø–æ–Ω—è–ª, –≤ –∫–∞–∫–æ–µ –≤—Ä–µ–º—è –ª—É—á—à–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è, –ø–æ—ç—Ç–æ–º—É —Ç–µ–ø–µ—Ä—å –µ–∂–µ–¥–Ω–µ–≤–Ω–æ –≤ 08:00 üòÖ —Ç—ã –±—É–¥–µ—à—å –ø–æ–ª—É—á–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ –≤
üìç${ctx.wizard.state.data.city}

–ï—Å–ª–∏ –∑–∞—Ö–æ—á–µ—à—å –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è - –ø–æ–¥ –∫–∞–∂–¥—ã–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ–º –µ—Å—Ç—å –∫–Ω–æ–ø–∫–∞üòâ`
        )
    }
    interval = setTimeout(async () => {
        const city = ctx.wizard.state.data.city
        interval = setInterval(() => operation(ctx, city), 10000)
        await operation(ctx, city)
    }, getTimeToNotification(+time.hours, +time.minutes))

    async function operation(ctx, city) {
        const weatherText = await weatherRequest(city)
        await ctx.reply(
            weatherText,
            Markup.inlineKeyboard([
                [
                    Markup.button.callback(
                        '–û—Ç–ø–∏—Å–∞—Ç—å—Å—èÔ∏è ‚ùå',
                        `/weather_unsubscribe_${interval}`
                    )
                ]
            ])
        )
    }

    return ctx.scene.leave()
})

export const weatherSubscribeScene = new Scenes.WizardScene(
    'weatherSubscribeScene',
    weatherSubscribeWizard,
    cityWeatherSubscribe,
    timeWeatherSubscribe
)
